/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Maxim Mavrichev (https://sketchfab.com/mvrc.art)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/vr-modern-gallery-room-499f13ada6234cb8a914a072c3013e82
Title: VR Modern Gallery Room
*/

import { useEffect, useRef, useState } from "react";
import { Box, Cylinder, SpotLight, useDepthBuffer, useGLTF } from "@react-three/drei";
// import { Vector3 } from "three";
import { Vector3, NearestFilter, TextureLoader, RepeatWrapping } from 'three'
import { useFrame, useThree } from "@react-three/fiber";
import { degToRad } from "three/src/math/MathUtils";
import ModelModernBench from "../Models/ModernBench";
import { ModelParkBench } from "../Models/ParkBench";

function MySpotlight() {
    const lightRef = useRef();
    const { scene } = useThree();

    // Add the target to the scene if it's not already there
    if (!lightRef?.current?.target?.isObject3D) {
        scene.add(lightRef.current.target);
    }

    return (
        <spotLight ref={lightRef} position={[0, 10, 0]}>
            <object3D position={[0, 0, -10]} attach="target" />
        </spotLight>
    );
}

function MovingSpot({
    section_i,
    vec = new Vector3(),
    ...props
}) {
    const light = useRef()
    const viewport = useThree((state) => state.viewport)
    useFrame((state) => {
        light.current.target.position.lerp(vec.set((100.5 * (section_i + 1)), -40, 0), 0.1)
        light.current.target.updateMatrixWorld()
    })
    return (
        <group>
            <Cylinder
                position={[0, 2.2, 0]}
                args={[0.025, 0.025, 0.7, 8]}
                material-color="white"
            // rotation={[0, 0, -Math.PI / 1.75]}
            />
            <Cylinder
                position={[0, 1.8, 0]}
                args={[0.05, 0.05, 0.2, 8]}
                material-color="white"
                rotation={[0, 0, -Math.PI / 1.75]}
            />
            <SpotLight
                castShadow
                ref={light}
                penumbra={1}
                distance={10}
                angle={0.35}
                attenuation={5}
                anglePower={4}
                intensity={50}
                {...props}
            />
        </group>
    )
}

export default function Model(props) {

    const { section_i } = props

    const { nodes, materials } = useGLTF(`${process.env.NEXT_PUBLIC_CDN}games/Assets+Gallery/gallery_room.glb`);

    const depthBuffer = useDepthBuffer({ frames: 1 })

    const [groundTexture, setGroundTexture] = useState(null);
    useEffect(() => {
        const loader = new TextureLoader();
        const texture = loader.load(
            `/img/plazz_tile.png`
        );

        texture.magFilter = NearestFilter;
        texture.wrapS = RepeatWrapping;
        texture.wrapT = RepeatWrapping;
        texture.repeat.set(15, 5);

        setGroundTexture(texture);

        // Cleanup the texture to avoid memory leaks
        return () => {
            texture.dispose();
        };
    }, []);

    return (
        <group {...props} dispose={null}>

            <group
                // key={section_i}
                position={[0, 0, 0]}
            >
                {[-1, 1].map((sign) => (
                    <group key={sign}>

                        <Box
                            args={[0.25, 0.25, 3]}
                            rotation={[0, 0, 0]}
                            position={[5 * sign, -0.4, 0]}
                        >
                            <meshStandardMaterial color="black" transparent opacity={1} />
                        </Box>
                        <Box
                            args={[0.25, 0.25, 3]}
                            rotation={[0, 0, 0]}
                            position={[5 * sign, 2.25, 0]}
                        >
                            <meshStandardMaterial color="black" transparent opacity={1} />
                        </Box>

                        <Box
                            args={[0.25, 5.25, 2]}
                            rotation={[0, 0, 0]}
                            position={[5.1 * sign, -0.25, 0]}
                        >
                            <meshStandardMaterial color="lightgray" transparent opacity={1} />
                        </Box>

                        {/* Side Windows */}
                        <mesh
                            rotation={[0, degToRad(90), 0]}
                            position={[-5, 0.5, 1.5]}
                        >
                            <planeGeometry
                                args={[1, 3.5]}
                            />
                            <meshStandardMaterial
                                color="cyan"
                                transparent={true}
                                opacity={0.25}
                            />
                        </mesh>
                        <mesh
                            rotation={[0, degToRad(-90), 0]}
                            position={[5, 0.5, 1.5]}
                        >
                            <planeGeometry
                                args={[1, 3.5]}
                            />
                            <meshStandardMaterial
                                color="cyan"
                                transparent={true}
                                opacity={0.25}
                            />
                        </mesh>

                        {/* Roof Windows */}
                        <group
                            // position={[0, 4.5, 0]}
                            rotation={[0, 0, degToRad(90)]}
                        >
                            <mesh
                                rotation={[0, degToRad(-90), 0]}
                                position={[2.4, 0, 1.5]}
                            >
                                <planeGeometry
                                    args={[1, 10]}
                                />
                                <meshStandardMaterial
                                    color="cyan"
                                    transparent={true}
                                    opacity={0.25}
                                />
                            </mesh>
                        </group>

                    </group>
                ))}

                <Box
                    args={[10, .1, 2]}
                    rotation={[0, 0, 0]}
                    position={[0, 2.35, 0]}
                >
                    <meshStandardMaterial color="gray" transparent opacity={1} />
                </Box>

                {/* Light Rail */}
                <Box
                    args={[0.25, .25, 3]}
                    rotation={[0, 0, 0]}
                    position={[0, 2.25, 0]}
                >
                    <meshStandardMaterial color="black" transparent opacity={1} />
                </Box>

                {/* Bench */}
                {section_i && section_i % 2 !== 0 && (
                    <group>
                        {/* <ModelModernBench 
                            position={[0, -0.4, 0]}
                        /> */}
                        <ModelParkBench
                            position={[0, -0.4, 1]}
                            scale={1.15}
                        />
                        {/* <Box
                            args={[0.75, .25, 1.5]}
                            rotation={[0, 0, 0]}
                            position={[0, -0.25, 0]}
                        >
                            <meshStandardMaterial color="gray" transparent opacity={1} />
                        </Box>
                        <Box
                            args={[0.025, .4, 1.5]}
                            rotation={[0, 0, 0]}
                            position={[0, 0.075, 0]}
                        >
                            <meshStandardMaterial color="black" transparent opacity={1} />
                        </Box> */}
                    </group>
                )}

                {/* Floor */}
                <mesh
                    // args={[0.25, .25, 2]}
                    rotation={[degToRad(-90), 0, 0]}
                    position={[0, -0.4, 0]}
                >
                    <meshStandardMaterial
                        map={groundTexture}
                    />
                    <planeGeometry args={[10, 3]} />
                </mesh>

                {/* <group
                            position={[0, 0, 0]}
                            rotation={[0, 0, Math.PI / 2]}
                        >
                            <SpotLight
                                // ref={light}
                                distance={10}
                                intensity={100}
                                angle={0.15}
                                attenuation={5}
                                position={[0, 2.25, 0]}
                                // target={[0, 2.25, 0]}
                                // rotation={[]}
                                anglePower={5} // Diffuse-cone anglePower (default: 5)
                            // target={targetRef.current}
                            />
                        </group> */}

                {/* <MovingSpot
                    section_i={section_i}
                    color="#0c8cbf"
                    position={[0, 1.8, 0]}
                /> */}

                {/* <MySpotlight /> */}

                {/* <Spot/> */}

                {/* <object3D ref={targetRef} position={[0, 0, 0]} /> */}

            </group>

            {/* Old fixed room */}
            {/* <group scale={0.01}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.VR_Gallery001_Material_0.geometry}
                    material={materials.Material}
                    position={[0, 0, 600]}
                    rotation={[-Math.PI / 2, 0, 0]}
                    scale={100}
                />
            </group> */}

        </group>
    );
}

useGLTF.preload(`${process.env.NEXT_PUBLIC_CDN}games/Assets+Gallery/gallery_room.glb`);
